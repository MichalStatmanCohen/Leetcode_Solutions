class Solution(object):
    def defangIPaddr(self, address):
        def_ip = []
        mystring = ""
        for i in address:
            if i == ".":
                i= "[.]"  
            mystring+=i

        return mystring
    
    def removeElement(self, nums, val):
        k= 0
        for x in nums:
            if x != val:
                k+=1
        return k
    
 #Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack

    def strStr(self, haystack, needle):
        # result = haystack.index(needle)
        # return result
        i = 0
        y = 0
        pl_index = -1
        for i in range(len(haystack)):
            y = 0
        # while y < len(needle):
            if haystack[i] == needle[y]:
                y+=1
                if y == len(needle):
                    pl_index = i + 1 - y
                    break
            i += 1        
        return pl_index
    
    def arglength(self, array):
        return len(array)

    def getConcatenation(self, nums):
        n = len(nums)
        new_nums = []
        x = 0
        while x<2:
            i = 0
            for i in nums:
                new_nums.append(i)
            x+=1
        return new_nums
    
    def buildArray(self, nums):
        output_array = []
        for i in nums:
            output_array.append(nums[i])
        return output_array
    
    def kWeakestRows(mat: list[list[int]], k: int):
        output_array = []
        for i, m in enumerate(mat[0]):
            ans = (sum(m), i)
            output_array.append(ans)
        output_array.sort()
        return [i[1] for i in output_array[:k]]

    def return_unique(self, list_to_check):
        list_to_return = []
        for x in list_to_check:
            if x not in list_to_return:
                list_to_return.append(x)
        return list_to_return
    
    def create_set(self, list_to_check):
        x = set(list_to_check)
        x = list(x)
        return x
    def canConstruct1(self, ransomNote,magazine):
        i=0
        x=0
        try:
            for x in ransomNote:
                if ransomNote[i] in magazine:
                    magazine=magazine.replace(ransomNote[i],"",1) 
                else:
                    return -1
                if i == len(ransomNote)-1:
                    return 1
                i+=1
        except Exception:
            print(traceback.format_exc())

    def canConstruct(self, ransomNote,magazine):
        mag_dict = {}
        for char in magazine:
            if char not in mag_dict:
                mag_dict[char] = 1
            else:
                mag_dict[char] += 1
        for char in ransomNote:
            if char not in mag_dict:
                return False
            if char in mag_dict and mag_dict[char] >0:
                mag_dict[char] -= 1
            else:
                return False
        return True
    
    def isIsomorphic(self, s, t):
        s_dict = {}
        t_dict = {}
        x=0
        y=0
        ss = None
        tt= None
        for char in s:
            if char not in s_dict:
                placelist =[]
                placelist.append(x)
                s_dict[char] = placelist
            else:
                s_dict[char].append(x)
            x+=1
        for char in t:
            if char not in t_dict:
                placelist =[]
                placelist.append(y)
                t_dict[char] = placelist
            else:
                t_dict[char].append(y)
            y+=1
        ss = list(s_dict.values())
        tt = list(t_dict.values())

        if ss == tt:           
            return True
        else:
            return False
        
    def maxProfit(self, prices):
        
        profit = 0
        price_to_buy =prices[0]
        price_to_sell = price_to_buy
        for i in prices:
            if i < price_to_buy:
                price_to_buy = i
                price_to_sell = 0
            if i > price_to_sell:
                price_to_sell = i
        profit = price_to_sell - price_to_buy

        return profit

    


